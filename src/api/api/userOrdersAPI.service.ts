/**
 * Pizzeria Fabulosa API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpContext, HttpEvent, HttpParams, HttpResponse} from '@angular/common/http';
import {Observable} from 'rxjs';

// @ts-ignore
import {CreatedOrderDTO} from '../model/createdOrderDTO';
// @ts-ignore
import {NewUserOrderDTO} from '../model/newUserOrderDTO';
// @ts-ignore
import {OrderSummaryListDTO} from '../model/orderSummaryListDTO';
// @ts-ignore
import {ResponseDTO} from '../model/responseDTO';
// @ts-ignore
import {UserOrderDTO} from '../model/userOrderDTO';

// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';
import {BaseService} from '../api.base.service';


@Injectable({
  providedIn: 'root'
})
export class UserOrdersAPIService extends BaseService {

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string | string[], @Optional() configuration?: Configuration) {
    super(basePath, configuration);
  }

  /**
   * Create user order
   * @param userId Id of the user for which to create the order
   * @param newUserOrderDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createUserOrder(userId: number, newUserOrderDTO: NewUserOrderDTO, observe?: 'body', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<CreatedOrderDTO>;
  public createUserOrder(userId: number, newUserOrderDTO: NewUserOrderDTO, observe?: 'response', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpResponse<CreatedOrderDTO>>;
  public createUserOrder(userId: number, newUserOrderDTO: NewUserOrderDTO, observe?: 'events', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpEvent<CreatedOrderDTO>>;
  public createUserOrder(userId: number, newUserOrderDTO: NewUserOrderDTO, observe: any = 'body', reportProgress: boolean = false, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling createUserOrder.');
    }
    if (newUserOrderDTO === null || newUserOrderDTO === undefined) {
      throw new Error('Required parameter newUserOrderDTO was null or undefined when calling createUserOrder.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Pizzeria.Fabulosa.ACCESS_TOKEN) required

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      'application/json'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v1/user/${this.configuration.encodeParam({name: "userId", value: userId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/order`;
    const {basePath, withCredentials} = this.configuration;
    return this.httpClient.request<CreatedOrderDTO>('post', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: newUserOrderDTO,
        responseType: <any>responseType_,
        ...(withCredentials ? {withCredentials} : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete user order by id
   * @param orderId Id of the order to delete
   * @param userId Id of the user the order belongs to
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteUserOrderById(orderId: number, userId: number, observe?: 'body', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<number>;
  public deleteUserOrderById(orderId: number, userId: number, observe?: 'response', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpResponse<number>>;
  public deleteUserOrderById(orderId: number, userId: number, observe?: 'events', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpEvent<number>>;
  public deleteUserOrderById(orderId: number, userId: number, observe: any = 'body', reportProgress: boolean = false, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<any> {
    if (orderId === null || orderId === undefined) {
      throw new Error('Required parameter orderId was null or undefined when calling deleteUserOrderById.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling deleteUserOrderById.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Pizzeria.Fabulosa.ACCESS_TOKEN) required

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      'application/json'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v1/user/${this.configuration.encodeParam({
      name: "userId",
      value: userId,
      in: "path",
      style: "simple",
      explode: false,
      dataType: "number",
      dataFormat: "int64"
    })}/order/${this.configuration.encodeParam({name: "orderId", value: orderId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
    const {basePath, withCredentials} = this.configuration;
    return this.httpClient.request<number>('delete', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? {withCredentials} : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Find user order by id
   * @param orderId Id of the order to find
   * @param userId Id of the user the order belongs to
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findUserOrderDTO(orderId: number, userId: number, observe?: 'body', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<UserOrderDTO>;
  public findUserOrderDTO(orderId: number, userId: number, observe?: 'response', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpResponse<UserOrderDTO>>;
  public findUserOrderDTO(orderId: number, userId: number, observe?: 'events', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpEvent<UserOrderDTO>>;
  public findUserOrderDTO(orderId: number, userId: number, observe: any = 'body', reportProgress: boolean = false, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<any> {
    if (orderId === null || orderId === undefined) {
      throw new Error('Required parameter orderId was null or undefined when calling findUserOrderDTO.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling findUserOrderDTO.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Pizzeria.Fabulosa.ACCESS_TOKEN) required

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      'application/json'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v1/user/${this.configuration.encodeParam({
      name: "userId",
      value: userId,
      in: "path",
      style: "simple",
      explode: false,
      dataType: "number",
      dataFormat: "int64"
    })}/order/${this.configuration.encodeParam({name: "orderId", value: orderId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
    const {basePath, withCredentials} = this.configuration;
    return this.httpClient.request<UserOrderDTO>('get', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? {withCredentials} : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Returns user orders summary with pagination
   * @param pageNumber Page number starting at 0
   * @param pageSize Page size
   * @param userId Id of the user for which to find the order summary
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findUserOrdersSummary(pageNumber: number, pageSize: number, userId: number, observe?: 'body', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<OrderSummaryListDTO>;
  public findUserOrdersSummary(pageNumber: number, pageSize: number, userId: number, observe?: 'response', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpResponse<OrderSummaryListDTO>>;
  public findUserOrdersSummary(pageNumber: number, pageSize: number, userId: number, observe?: 'events', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpEvent<OrderSummaryListDTO>>;
  public findUserOrdersSummary(pageNumber: number, pageSize: number, userId: number, observe: any = 'body', reportProgress: boolean = false, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<any> {
    if (pageNumber === null || pageNumber === undefined) {
      throw new Error('Required parameter pageNumber was null or undefined when calling findUserOrdersSummary.');
    }
    if (pageSize === null || pageSize === undefined) {
      throw new Error('Required parameter pageSize was null or undefined when calling findUserOrdersSummary.');
    }
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling findUserOrdersSummary.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>pageNumber, 'pageNumber');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>pageSize, 'pageSize');

    let localVarHeaders = this.defaultHeaders;

    // authentication (Pizzeria.Fabulosa.ACCESS_TOKEN) required

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      'application/json'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v1/user/${this.configuration.encodeParam({
      name: "userId",
      value: userId,
      in: "path",
      style: "simple",
      explode: false,
      dataType: "number",
      dataFormat: "int64"
    })}/order/summary`;
    const {basePath, withCredentials} = this.configuration;
    return this.httpClient.request<OrderSummaryListDTO>('get', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        ...(withCredentials ? {withCredentials} : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

}
