openapi: 3.1.0
info:
  title: Pizzeria Fabulosa API
  version: v1
servers:
- url: http://192.168.1.128:8080
  description: Generated server url
tags:
- name: User Address API
  description: User address related operations
- name: User account API
  description: User account related operations
- name: Anonymous User API
  description: Anonymous user related operations
- name: Resources API
  description: Pizzeria's resources
paths:
  /logout:
    post:
      tags:
      - Logout
      summary: Delete Access Token and ID Token Cookies
      operationId: logout
      responses:
        "200":
          description: OK
  /api/v1/user/{userId}/order:
    post:
      tags:
      - User orders API
      summary: Create user order
      operationId: createUserOrder
      parameters:
      - name: userId
        in: path
        description: Id of the user for which to create the order
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserOrderDTO"
        required: true
      responses:
        "201":
          description: Returns created order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedOrderDTO"
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
  /api/v1/user/{userId}/address:
    get:
      tags:
      - User Address API
      summary: Find user's address list
      operationId: findUserAddressListById
      parameters:
      - name: userId
        in: path
        description: Id of the user for which to find the address list
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returns user addresses JSON array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AddressDTO"
        "204":
          description: User address list is empty
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
    post:
      tags:
      - User Address API
      summary: Create user address
      operationId: createUserAddress
      parameters:
      - name: userId
        in: path
        description: Id of the user for which to create the address
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressDTO"
        required: true
      responses:
        "201":
          description: Address created
        "400":
          description: Validation failed or user address limit of 3 has been reached
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
  /api/v1/anon/register:
    post:
      tags:
      - Anonymous User API
      summary: Register anonymous user
      operationId: registerAnonUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDTO"
        required: true
      responses:
        "201":
          description: Registration successful
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
  /api/v1/anon/order:
    post:
      tags:
      - Anonymous User API
      summary: Create order as an anonymous user
      operationId: createAnonOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAnonOrderDTO"
        required: true
      responses:
        "201":
          description: Returns created order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedOrderDTO"
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
  /api/v1/user/{userId}/order/{orderId}:
    get:
      tags:
      - User orders API
      summary: Find user order by id
      operationId: findUserOrderDTO
      parameters:
      - name: orderId
        in: path
        description: Id of the order to find
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: Id of the user the order belongs to
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returns user order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOrderDTO"
        "204":
          description: User order not found
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
    delete:
      tags:
      - User orders API
      summary: Delete user order by id
      operationId: deleteUserOrderById
      parameters:
      - name: orderId
        in: path
        description: Id of the order to delete
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: Id of the user the order belongs to
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returns the deleted order's id
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "204":
          description: User order not found
        "400":
          description: Validation failed or invalid request or order delete time-limit
            passed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
  /api/v1/user/{userId}/order/summary:
    get:
      tags:
      - User orders API
      summary: Returns user orders summary with pagination
      operationId: findUserOrdersSummary
      parameters:
      - name: pageNumber
        in: query
        description: Page number starting at 0
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: Page size
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        description: Id of the user for which to find the order summary
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returns user orders summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderSummaryListDTO"
        "204":
          description: User orders summary is empty
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
  /api/v1/resource/store:
    get:
      tags:
      - Resources API
      summary: Returns all stores
      operationId: findAllStores
      responses:
        "200":
          description: Returns store list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreListDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
  /api/v1/resource/product:
    get:
      tags:
      - Resources API
      summary: Returns all products by type with pagination
      operationId: findAllProductsByType
      parameters:
      - name: type
        in: query
        description: Type of the product
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        description: Page number starting at 0
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: Page size
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Returns product list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListDTO"
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
  /api/v1/resource/offer:
    get:
      tags:
      - Resources API
      summary: Returns all offers
      operationId: findAllOffers
      responses:
        "200":
          description: Returns offer list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferListDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
  /api/v1/resource/now:
    get:
      tags:
      - Resources API
      summary: Returns the local date and time accounting for DST
      operationId: getNowAccountingDST
      responses:
        "200":
          description: Returns the local date and time accounting for DST
          content:
            application/json:
              schema:
                type: string
                format: date-time
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
  /api/v1/user:
    delete:
      tags:
      - User account API
      summary: Delete user account
      operationId: deleteUser
      parameters:
      - name: id
        in: query
        description: Id of the user account to delete
        required: true
        schema:
          type: integer
          format: int64
      - name: password
        in: query
        description: Password of the user account to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Account deleted
        "400":
          description: Validation failed or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred or attempted to delete dummy
            account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
  /api/v1/user/{userId}/address/{addressId}:
    delete:
      tags:
      - User Address API
      summary: Delete user address
      operationId: deleteUserAddress
      parameters:
      - name: addressId
        in: path
        description: Id of the address to delete
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: Id of the user the address belongs to
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Address deleted
        "400":
          description: Validation failed or address to delete is not part of user
            address list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "401":
          description: User authentification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
        "500":
          description: Unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDTO"
      security:
      - Bearer_Authentication: []
  /login:
    post:
      tags:
      - login-endpoint
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
components:
  schemas:
    CartDTO:
      type: object
      properties:
        totalQuantity:
          type: integer
          format: int32
        totalCost:
          type: number
          format: double
        totalCostOffers:
          type: number
          format: double
        cartItems:
          type: array
          items:
            $ref: "#/components/schemas/CartItemDTO"
      required:
      - cartItems
      - totalCost
      - totalCostOffers
      - totalQuantity
    CartItemDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          minLength: 1
        price:
          type: number
          format: double
        quantity:
          type: integer
          format: int32
        name:
          type: object
          additionalProperties:
            type: string
        description:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        formats:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
      required:
      - description
      - formats
      - name
      - price
      - quantity
      - type
    NewUserOrderDTO:
      type: object
      properties:
        addressId:
          type: integer
          format: int64
        orderDetails:
          $ref: "#/components/schemas/OrderDetailsDTO"
        cart:
          $ref: "#/components/schemas/CartDTO"
      required:
      - addressId
      - cart
      - orderDetails
    OrderDetailsDTO:
      type: object
      properties:
        deliveryTime:
          type: string
          minLength: 1
        paymentMethod:
          type: string
          minLength: 1
        billToChange:
          type: number
          format: double
        comment:
          type: string
          pattern: "^[a-zA-Z0-9ÁÉÍÓÚáéíóúÑñ!¡¿?.-:,ºª\" ]{0,150}$"
        storePickUp:
          type: boolean
        changeToGive:
          type: number
          format: double
      required:
      - deliveryTime
      - paymentMethod
      - storePickUp
    AddressDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        street:
          type: string
        number:
          type: integer
          format: int32
        details:
          type: string
    CreatedOrderDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        formattedCreatedOn:
          type: string
        customer:
          $ref: "#/components/schemas/CustomerDTO"
        address:
          $ref: "#/components/schemas/AddressDTO"
        orderDetails:
          $ref: "#/components/schemas/OrderDetailsDTO"
        cart:
          $ref: "#/components/schemas/CartDTO"
      required:
      - address
      - cart
      - customer
      - formattedCreatedOn
      - id
      - orderDetails
    CustomerDTO:
      type: object
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z ÁÉÍÓÚáéíóúÑñ.-]{2,50}$"
        contactNumber:
          type: integer
          format: int32
        email:
          type: string
      required:
      - contactNumber
      - email
      - name
    APIError:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cause:
          type: string
        message:
          type: string
        origin:
          type: string
        path:
          type: string
        logged:
          type: boolean
        fatal:
          type: boolean
        createdOn:
          type: string
          format: date-time
      required:
      - cause
      - createdOn
      - fatal
      - logged
      - message
      - origin
      - path
    ResponseDTO:
      type: object
      properties:
        apiError:
          $ref: "#/components/schemas/APIError"
      required:
      - apiError
    RegisterDTO:
      type: object
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z ÁÉÍÓÚáéíóúÑñ.-]{2,50}$"
        email:
          type: string
          minLength: 1
        matchingEmail:
          type: string
          minLength: 1
        contactNumber:
          type: integer
          format: int32
        password:
          type: string
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$"
        matchingPassword:
          type: string
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$"
      required:
      - contactNumber
      - email
      - matchingEmail
      - matchingPassword
      - name
      - password
    NewAnonOrderDTO:
      type: object
      properties:
        customer:
          $ref: "#/components/schemas/CustomerDTO"
        address:
          $ref: "#/components/schemas/AddressDTO"
        orderDetails:
          $ref: "#/components/schemas/OrderDetailsDTO"
        cart:
          $ref: "#/components/schemas/CartDTO"
      required:
      - address
      - cart
      - customer
      - orderDetails
    UserOrderDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        formattedCreatedOn:
          type: string
        address:
          $ref: "#/components/schemas/AddressDTO"
        orderDetails:
          $ref: "#/components/schemas/OrderDetailsDTO"
        cart:
          $ref: "#/components/schemas/CartDTO"
      required:
      - address
      - cart
      - createdOn
      - formattedCreatedOn
      - id
      - orderDetails
    OrderSummaryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        formattedCreatedOn:
          type: string
        paymentMethod:
          type: string
        quantity:
          type: integer
          format: int32
        cost:
          type: number
          format: double
        costAfterOffers:
          type: number
          format: double
      required:
      - cost
      - costAfterOffers
      - formattedCreatedOn
      - id
      - paymentMethod
      - quantity
    OrderSummaryListDTO:
      type: object
      properties:
        orderList:
          type: array
          items:
            $ref: "#/components/schemas/OrderSummaryDTO"
        totalPages:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        hasNext:
          type: boolean
      required:
      - hasNext
      - orderList
      - pageSize
      - totalElements
      - totalPages
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
        street:
          type: string
        number:
          type: integer
          format: int32
        details:
          type: string
      required:
      - number
      - street
    Store:
      type: object
      properties:
        id:
          type: integer
          format: int64
        image:
          type: string
        name:
          type: string
        phoneNumber:
          type: integer
          format: int32
        schedule:
          type: object
          additionalProperties:
            type: string
        address:
          $ref: "#/components/schemas/Address"
      required:
      - address
      - image
      - name
      - phoneNumber
      - schedule
    StoreListDTO:
      type: object
      properties:
        stores:
          type: array
          items:
            $ref: "#/components/schemas/Store"
      required:
      - stores
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        image:
          type: string
        name:
          type: object
          additionalProperties:
            type: string
        description:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        formats:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        prices:
          type: object
          additionalProperties:
            type: number
            format: double
        allergens:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
      - allergens
      - description
      - formats
      - image
      - name
      - prices
      - type
    ProductListDTO:
      type: object
      properties:
        productList:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        totalPages:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        hasNext:
          type: boolean
      required:
      - hasNext
      - pageSize
      - productList
      - totalElements
      - totalPages
    Offer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        image:
          type: string
        name:
          type: object
          additionalProperties:
            type: string
        description:
          type: object
          additionalProperties:
            type: string
        caveat:
          type: object
          additionalProperties:
            type: string
      required:
      - caveat
      - description
      - image
      - name
    OfferListDTO:
      type: object
      properties:
        offers:
          type: array
          items:
            $ref: "#/components/schemas/Offer"
      required:
      - offers
  securitySchemes:
    Bearer_Authentication:
      type: http
      in: cookie
      scheme: bearer
      bearerFormat: JWT
